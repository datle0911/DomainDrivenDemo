// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Warehouse.Infrastructure;

#nullable disable

namespace Warehouse.Api.Migrations
{
    [DbContext(typeof(WarehouseDbContext))]
    [Migration("20220111083431_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.HasSequence("basketeq", "warehouse")
                .IncrementsBy(10);

            modelBuilder.HasSequence("basketInconsistencieeq", "warehouse")
                .IncrementsBy(10);

            modelBuilder.HasSequence("employeeeq", "warehouse")
                .IncrementsBy(10);

            modelBuilder.HasSequence("goodsIssueEntriyeq", "warehouse")
                .IncrementsBy(10);

            modelBuilder.HasSequence("goodsissueentrybasketeq", "warehouse")
                .IncrementsBy(10);

            modelBuilder.HasSequence("goodsIssueeq", "warehouse")
                .IncrementsBy(10);

            modelBuilder.HasSequence("goodsreceiptentryeq", "warehouse")
                .IncrementsBy(10);

            modelBuilder.HasSequence("goodsreceipteq", "warehouse")
                .IncrementsBy(10);

            modelBuilder.HasSequence("producteq", "warehouse")
                .IncrementsBy(10);

            modelBuilder.HasSequence("stockcardentryeq", "warehouse")
                .IncrementsBy(10);

            modelBuilder.HasSequence("storagesloteq", "warehouse")
                .IncrementsBy(10);

            modelBuilder.Entity("Warehouse.Domain.AggregateModels.BasketAggregate.Basket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseHiLo(b.Property<int>("Id"), "basketeq", "warehouse");

                    b.Property<int?>("ActualQuantity")
                        .HasColumnType("int");

                    b.Property<string>("BasketId")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<bool>("IsConsistent")
                        .HasColumnType("bit");

                    b.Property<int?>("PlannedQuantity")
                        .HasColumnType("int");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ProductionDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("StorageSlotId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BasketId")
                        .IsUnique();

                    b.HasIndex("ProductId");

                    b.HasIndex("StorageSlotId")
                        .IsUnique()
                        .HasFilter("[StorageSlotId] IS NOT NULL");

                    b.ToTable("Baskets");
                });

            modelBuilder.Entity("Warehouse.Domain.AggregateModels.BasketInconsistencyAggregate.BasketInconsistency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseHiLo(b.Property<int>("Id"), "basketInconsistencieeq", "warehouse");

                    b.Property<string>("BasketId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("CurrentMass")
                        .HasColumnType("float");

                    b.Property<int>("CurrentQuantity")
                        .HasColumnType("int");

                    b.Property<string>("GoodsIssueId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsFixed")
                        .HasColumnType("bit");

                    b.Property<double>("NewMass")
                        .HasColumnType("float");

                    b.Property<int>("NewQuantity")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("ReporterId")
                        .HasColumnType("int");

                    b.Property<string>("StorageSlotId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("ReporterId");

                    b.HasIndex("BasketId", "Timestamp");

                    b.ToTable("BasketInconsistencies");
                });

            modelBuilder.Entity("Warehouse.Domain.AggregateModels.EmployeeAggregate.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseHiLo(b.Property<int>("Id"), "employeeeq", "warehouse");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId")
                        .IsUnique();

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Warehouse.Domain.AggregateModels.GoodsIssueAggregate.GoodsIssue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseHiLo(b.Property<int>("Id"), "goodsIssueeq", "warehouse");

                    b.Property<string>("GoodsIssueId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ShiftLeaderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("GoodsIssueId")
                        .IsUnique();

                    b.HasIndex("ShiftLeaderId");

                    b.ToTable("GoodsIssues");
                });

            modelBuilder.Entity("Warehouse.Domain.AggregateModels.GoodsIssueAggregate.GoodsIssueEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseHiLo(b.Property<int>("Id"), "goodsIssueEntriyeq", "warehouse");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("GoodsIssueId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("TotalQuantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ProductId");

                    b.HasIndex("GoodsIssueId", "ProductId")
                        .IsUnique();

                    b.ToTable("GoodsIssueEntry");
                });

            modelBuilder.Entity("Warehouse.Domain.AggregateModels.GoodsIssueAggregate.GoodsIssueEntryBasket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseHiLo(b.Property<int>("Id"), "goodsissueentrybasketeq", "warehouse");

                    b.Property<string>("BasketId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("GoodsIssueEntryId")
                        .HasColumnType("int");

                    b.Property<bool>("IsTaken")
                        .HasColumnType("bit");

                    b.Property<double>("Mass")
                        .HasColumnType("float");

                    b.Property<DateTime>("ProductionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("StorageSlotId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StorageSlotId");

                    b.HasIndex("GoodsIssueEntryId", "BasketId")
                        .IsUnique();

                    b.ToTable("GoodsIssueEntryBasket");
                });

            modelBuilder.Entity("Warehouse.Domain.AggregateModels.GoodsReceipAggregate.GoodsReceipt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseHiLo(b.Property<int>("Id"), "goodsreceipteq", "warehouse");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("Timestamp")
                        .IsUnique();

                    b.ToTable("GoodsReceipts");
                });

            modelBuilder.Entity("Warehouse.Domain.AggregateModels.GoodsReceipAggregate.GoodsReceiptEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseHiLo(b.Property<int>("Id"), "goodsreceiptentryeq", "warehouse");

                    b.Property<int>("ActualQuantity")
                        .HasColumnType("int");

                    b.Property<string>("BasketId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("GoodsReceiptId")
                        .HasColumnType("int");

                    b.Property<int>("PlannedQuantity")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ProductionDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("GoodsReceiptId", "BasketId")
                        .IsUnique();

                    b.ToTable("GoodsReceiptEntry");
                });

            modelBuilder.Entity("Warehouse.Domain.AggregateModels.ProductAggregate.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseHiLo(b.Property<int>("Id"), "producteq", "warehouse");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("PiecesPerKilogram")
                        .HasColumnType("float");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<int>("UnitOfMeasurement")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Warehouse.Domain.AggregateModels.StockCardAggregate.StockCardEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseHiLo(b.Property<int>("Id"), "stockcardentryeq", "warehouse");

                    b.Property<double>("AfterMass")
                        .HasColumnType("float");

                    b.Property<int>("AfterQuantity")
                        .HasColumnType("int");

                    b.Property<double>("BeforeMass")
                        .HasColumnType("float");

                    b.Property<int>("BeforeQuantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<double>("InputMass")
                        .HasColumnType("float");

                    b.Property<int>("InputQuantity")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("OutputMass")
                        .HasColumnType("float");

                    b.Property<int>("OutputQuantity")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId", "Date")
                        .IsUnique();

                    b.ToTable("StockCardEntries");
                });

            modelBuilder.Entity("Warehouse.Domain.AggregateModels.StorageSlotAggregate.StorageSlot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseHiLo(b.Property<int>("Id"), "storagesloteq", "warehouse");

                    b.Property<string>("StorageSlotId")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.HasIndex("StorageSlotId")
                        .IsUnique();

                    b.ToTable("StorageSlots");
                });

            modelBuilder.Entity("Warehouse.Domain.AggregateModels.BasketAggregate.Basket", b =>
                {
                    b.HasOne("Warehouse.Domain.AggregateModels.ProductAggregate.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.HasOne("Warehouse.Domain.AggregateModels.StorageSlotAggregate.StorageSlot", "StorageSlot")
                        .WithOne("Basket")
                        .HasForeignKey("Warehouse.Domain.AggregateModels.BasketAggregate.Basket", "StorageSlotId");

                    b.Navigation("Product");

                    b.Navigation("StorageSlot");
                });

            modelBuilder.Entity("Warehouse.Domain.AggregateModels.BasketInconsistencyAggregate.BasketInconsistency", b =>
                {
                    b.HasOne("Warehouse.Domain.AggregateModels.ProductAggregate.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Warehouse.Domain.AggregateModels.EmployeeAggregate.Employee", "Reporter")
                        .WithMany()
                        .HasForeignKey("ReporterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Reporter");
                });

            modelBuilder.Entity("Warehouse.Domain.AggregateModels.GoodsIssueAggregate.GoodsIssue", b =>
                {
                    b.HasOne("Warehouse.Domain.AggregateModels.EmployeeAggregate.Employee", "ShiftLeader")
                        .WithMany()
                        .HasForeignKey("ShiftLeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ShiftLeader");
                });

            modelBuilder.Entity("Warehouse.Domain.AggregateModels.GoodsIssueAggregate.GoodsIssueEntry", b =>
                {
                    b.HasOne("Warehouse.Domain.AggregateModels.EmployeeAggregate.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Warehouse.Domain.AggregateModels.GoodsIssueAggregate.GoodsIssue", null)
                        .WithMany("Entries")
                        .HasForeignKey("GoodsIssueId");

                    b.HasOne("Warehouse.Domain.AggregateModels.ProductAggregate.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Warehouse.Domain.AggregateModels.GoodsIssueAggregate.GoodsIssueEntryBasket", b =>
                {
                    b.HasOne("Warehouse.Domain.AggregateModels.GoodsIssueAggregate.GoodsIssueEntry", null)
                        .WithMany("Baskets")
                        .HasForeignKey("GoodsIssueEntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Warehouse.Domain.AggregateModels.StorageSlotAggregate.StorageSlot", "StorageSlot")
                        .WithMany()
                        .HasForeignKey("StorageSlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StorageSlot");
                });

            modelBuilder.Entity("Warehouse.Domain.AggregateModels.GoodsReceipAggregate.GoodsReceipt", b =>
                {
                    b.HasOne("Warehouse.Domain.AggregateModels.EmployeeAggregate.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Warehouse.Domain.AggregateModels.GoodsReceipAggregate.GoodsReceiptEntry", b =>
                {
                    b.HasOne("Warehouse.Domain.AggregateModels.GoodsReceipAggregate.GoodsReceipt", null)
                        .WithMany("Entries")
                        .HasForeignKey("GoodsReceiptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Warehouse.Domain.AggregateModels.ProductAggregate.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Warehouse.Domain.AggregateModels.StockCardAggregate.StockCardEntry", b =>
                {
                    b.HasOne("Warehouse.Domain.AggregateModels.ProductAggregate.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Warehouse.Domain.AggregateModels.GoodsIssueAggregate.GoodsIssue", b =>
                {
                    b.Navigation("Entries");
                });

            modelBuilder.Entity("Warehouse.Domain.AggregateModels.GoodsIssueAggregate.GoodsIssueEntry", b =>
                {
                    b.Navigation("Baskets");
                });

            modelBuilder.Entity("Warehouse.Domain.AggregateModels.GoodsReceipAggregate.GoodsReceipt", b =>
                {
                    b.Navigation("Entries");
                });

            modelBuilder.Entity("Warehouse.Domain.AggregateModels.StorageSlotAggregate.StorageSlot", b =>
                {
                    b.Navigation("Basket");
                });
#pragma warning restore 612, 618
        }
    }
}
